[{"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\App.js":"1","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Map\\Map.jsx":"2","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Cards\\Cards.jsx":"3","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Charts\\Charts.jsx":"4","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\api\\index.js":"5","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Data\\Data.jsx":"6","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\index.js":"7","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\index.js":"8"},{"size":1614,"mtime":1608483224015,"results":"9","hashOfConfig":"10"},{"size":4628,"mtime":1608450315376,"results":"11","hashOfConfig":"10"},{"size":4498,"mtime":1608483649330,"results":"12","hashOfConfig":"10"},{"size":3364,"mtime":1608447373367,"results":"13","hashOfConfig":"10"},{"size":1368,"mtime":1608481999448,"results":"14","hashOfConfig":"10"},{"size":778,"mtime":1606859356684,"results":"15","hashOfConfig":"10"},{"size":150,"mtime":1606859356693,"results":"16","hashOfConfig":"10"},{"size":192,"mtime":1608444837237,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u36fta",{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\App.js",["37"],"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Map\\Map.jsx",["38","39","40","41","42","43"],"import React from \"react\";\r\nimport { MapContainer, Circle, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\r\n\r\nimport styles from \"./Map.module.css\";\r\n\r\nconst Leaflet = (props) => {\r\n    const [state, setState] = React.useState({\r\n        checkedA: true,\r\n    })\r\n  //  console.log(props);\r\n  let position = [0, 0];\r\n  const zoom = 3;\r\n  const countryData = props.data.countryData;\r\n  const provinceData = props.data.provinceData;\r\n  //console.log(countryData);\r\n\r\n  //const items = CountryCircles(countryData);\r\n  const items = ProvinceCircles(countryData, provinceData)\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <MapContainer\r\n        center={position}\r\n        zoom={zoom}\r\n        style={{ width: \"70%\", height: \"500px\",\r\n        noWrap:  true\r\n       }}\r\n      >\r\n        <TileLayer\r\n          url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n          attribution={\r\n            'Â© <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          }\r\n          \r\n          \r\n        />\r\n        {items}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CountryCircles = (data) => {\r\n  const items = [];\r\n\r\n  for (let key in data) {\r\n    if (key !== \"data\") {\r\n      let pos = [data[key].latitude, data[key].longitude];\r\n      let confirmed = data[key].confirmed;\r\n      let dead = data[key].dead;\r\n      let recovered = data[key].recovered;\r\n      let location = data[key].location;\r\n\r\n      let radius = 0.1 * confirmed;\r\n      let color = \"blue\";\r\n\r\n      if (confirmed > 500000) {\r\n        color = \"red\";\r\n      }\r\n\r\n      //console.log(position);\r\n      items.push(\r\n        <Circle\r\n          className=\"circles\"\r\n          key={key}\r\n          center={pos}\r\n          radius={radius}\r\n          color={color}\r\n        >\r\n          <Popup>\r\n            {location} <br />\r\n            Confirmed: {confirmed} <br />\r\n            Recovered: {recovered} <br />\r\n            Deaths: {dead} <br />\r\n          </Popup>\r\n        </Circle>\r\n      );\r\n\r\n      // console.log(pos);\r\n      // console.log(confirmed);\r\n    }\r\n  }\r\n\r\n  return items;\r\n};\r\n\r\nconst ProvinceCircles = (countryData, provinceData) => {\r\n  const items = [];\r\n  let flag = false;\r\n\r\n  for (let key in countryData) {\r\n    if (key !== \"data\") {\r\n      for (let key2 in provinceData) {\r\n        if (key2 !== \"data\") {\r\n          if (countryData[key].country_code === provinceData[key2].country_code) {\r\n            flag = true;\r\n          }\r\n        }\r\n    \r\n    }\r\n\r\n    if (flag === false) {\r\n        let pos = [countryData[key].latitude, countryData[key].longitude];\r\n        let confirmed = countryData[key].confirmed;\r\n        let dead = countryData[key].dead;\r\n        let recovered = countryData[key].recovered;\r\n        let location = countryData[key].location;\r\n\r\n        let radius = 0.1 * confirmed;\r\n        let color = \"blue\";\r\n\r\n        if (confirmed > 500000) {\r\n          color = \"red\";\r\n        }\r\n\r\n        //console.log(position);\r\n        items.push(\r\n          <Circle\r\n            className=\"circles\"\r\n            key={location}\r\n            center={pos}\r\n            radius={radius}\r\n            color={color}\r\n          >\r\n            <Popup>\r\n              {location} <br />\r\n              Confirmed: {confirmed} <br />\r\n              Recovered: {recovered} <br />\r\n              Deaths: {dead} <br />\r\n            </Popup>\r\n          </Circle>\r\n        );\r\n      }\r\n\r\n      flag = false;\r\n\r\n\r\n\r\n\r\n      \r\n    }\r\n\r\n    // console.log(pos);\r\n    // console.log(confirmed);\r\n  }\r\n\r\n  for (let key in provinceData) {\r\n    if (key !== \"data\") {\r\n        let pos = [provinceData[key].latitude, provinceData[key].longitude];\r\n        let confirmed = provinceData[key].confirmed;\r\n        let dead = provinceData[key].dead;\r\n        let recovered = provinceData[key].recovered;\r\n        let location = provinceData[key].location;\r\n\r\n        let radius = 0.1 * confirmed;\r\n        let color = \"blue\";\r\n\r\n        if (confirmed > 500000) {\r\n          color = \"red\";\r\n        }\r\n\r\n        //console.log(position);\r\n        items.push(\r\n          <Circle\r\n            className=\"circles\"\r\n            key={location}\r\n            center={pos}\r\n            radius={radius}\r\n            color={color}\r\n          >\r\n            <Popup>\r\n              {location} <br />\r\n              Confirmed: {confirmed} <br />\r\n              Recovered: {recovered} <br />\r\n              Deaths: {dead} <br />\r\n            </Popup>\r\n          </Circle>\r\n        );\r\n      }\r\n        \r\n        \r\n    }\r\n\r\n    return items;\r\n}\r\nexport default Leaflet;\r\n","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Cards\\Cards.jsx",[],"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Charts\\Charts.jsx",["44","45","46","47"],"import React, { useState, useEffect } from 'react';\r\nimport {Line, Bar, Polar, Doughnut } from 'react-chartjs-2';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = (props) => {\r\n\r\n    let la_county;\r\n    let countyarray = [];\r\n    let countyconfirmed = [];\r\n    let countynames = [];\r\n    let californiaconfirmed = []\r\n    let californianames = []\r\n    let californiacolors = []\r\n\r\n    // from https://stackoverflow.com/questions/23095637/how-do-you-get-random-rgb-in-javascript\r\n    function random_rgba() {\r\n        var o = Math.round, r = Math.random, s = 255;\r\n        return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\r\n    }\r\n\r\n\r\n\r\n    console.log('doodoo')\r\n    if (props.data.cityData[0] != null) {\r\n        console.log(props.data.cityData[1534].location)\r\n\r\n        for (let i = 0; i < props.data.cityData.length; i++) {\r\n            if (props.data.cityData[i].location === \"Los Angeles County, California\") {\r\n                console.log(i);\r\n                la_county = i;\r\n            }\r\n            if (props.data.cityData[i].country_code.includes('us')) {\r\n                countyarray.push(props.data.cityData[i])\r\n                countyconfirmed.push(props.data.cityData[i].confirmed)\r\n                countynames.push(props.data.cityData[i].location)\r\n                //console.log(countyarray);\r\n                if (props.data.cityData[i].location.includes('California')) {\r\n                    californiaconfirmed.push(props.data.cityData[i].confirmed)\r\n                    californianames.push(props.data.cityData[i].location)\r\n                    californiacolors.push(random_rgba())\r\n                 //   console.log(californiacolors)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const barChart = (\r\n        props.data.cityData[0] ? (\r\n            <Bar\r\n            data={{\r\n                labels: ['Confrimed', 'Dead'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0, 0, 255, 0.5)', \r\n                        'rgba(255, 0, 0, 0.5)'\r\n                    ],\r\n                    data: [props.data.cityData[la_county].confirmed, props.data.cityData[la_county].dead]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true, text:`Current County ${props.data.cityData[la_county].location}`},\r\n            }}\r\n            />\r\n        ) : null\r\n\r\n    )\r\n\r\n    const doughtnutChart = (\r\n        props.data.cityData[0] ? (\r\n            <Doughnut\r\n            data={{\r\n                labels: californianames,\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: californiacolors,\r\n                    data: californiaconfirmed\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true, text:`California Counties`},\r\n            }}\r\n            />\r\n        ) : null\r\n    )\r\n    return(\r\n        <div className={styles.container}>\r\n            <div className ={styles.charts}>\r\n            {barChart}\r\n            </div>\r\n            <div className ={styles.charts}>\r\n            {doughtnutChart}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\api\\index.js",[],"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\Data\\Data.jsx",[],"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\index.js",[],["48","49"],"C:\\Users\\jenni\\Documents\\FrontEndWeb\\CovidTracker\\src\\components\\index.js",[],{"ruleId":"50","severity":1,"message":"51","line":36,"column":18,"nodeType":"52","messageId":"53","endLine":36,"endColumn":21},{"ruleId":"50","severity":1,"message":"54","line":2,"column":43,"nodeType":"52","messageId":"53","endLine":2,"endColumn":49},{"ruleId":"50","severity":1,"message":"55","line":3,"column":10,"nodeType":"52","messageId":"53","endLine":3,"endColumn":18},{"ruleId":"50","severity":1,"message":"56","line":3,"column":20,"nodeType":"52","messageId":"53","endLine":3,"endColumn":36},{"ruleId":"50","severity":1,"message":"57","line":8,"column":12,"nodeType":"52","messageId":"53","endLine":8,"endColumn":17},{"ruleId":"50","severity":1,"message":"58","line":8,"column":19,"nodeType":"52","messageId":"53","endLine":8,"endColumn":27},{"ruleId":"50","severity":1,"message":"59","line":44,"column":7,"nodeType":"52","messageId":"53","endLine":44,"endColumn":21},{"ruleId":"50","severity":1,"message":"60","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"50","severity":1,"message":"61","line":1,"column":27,"nodeType":"52","messageId":"53","endLine":1,"endColumn":36},{"ruleId":"50","severity":1,"message":"62","line":2,"column":9,"nodeType":"52","messageId":"53","endLine":2,"endColumn":13},{"ruleId":"50","severity":1,"message":"63","line":2,"column":20,"nodeType":"52","messageId":"53","endLine":2,"endColumn":25},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},"no-unused-vars","'key' is assigned a value but never used.","Identifier","unusedVar","'Marker' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'CountryCircles' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Line' is defined but never used.","'Polar' is defined but never used.","no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-global-assign","no-unsafe-negation"]